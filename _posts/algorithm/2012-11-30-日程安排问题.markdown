---
layout: post
title:  "日程安排问题"
date:   2012-11-30 15:36:55
categories: algorithm  
tag: ["algorithm","贪心算法"]
---
###问题描述： 
设有n个活动的集合E={1,2,…,n}，其中每个活动都要求使用同一资源，如演讲会场等，
而在同一时间内只有一个活动能使用这一资源。 
每个活动i都有一个要求使用该资源的起始时间si和一个结束时间fi,且`si<fi` 。 
 
#####问题1，怎样安排选择的活动最多？ 
解： 贪心算法。将活动按照结束时间从小到大排列。当前时间为start,从表格中选择第一个`Si>start`的，
然后start=fi,再从向后比较。 
算法复杂度o(n). 

证明：start时间之后,按照贪心算法下一个应该选活动i。假设应该选择j而不是i, 
设fi这后可安排的工作为n个，fj后可安排的活动数为m,显然`n>=m`,如果选择i活动是错误的，选择j是正确的。 
那么在start和sj之间必然有活动k插入。这与选择活动j作为下一个进行的活动是矛盾的。所以应通过贪心策略选择。 

	#include <cstdlib>  
	#include <iostream>  
	using namespace std;  
	typedef struct TASK  
	{  
		int start;  
		int end;  
		int id;  
	}Task;  

	int cmpTask(const void* t1,const void* t2)  
	{  
		return ((Task*)t1)->end > ((Task*)t2)->end;  
	}  
	void TaskPro(Task* ts,int length)  
	{  
		qsort(ts,length,sizeof(Task),cmpTask);  
		int time=0;  
		for(int i=0;i<length;i++)  
		{  
			if(ts[i].start>=time)  
			{  
				cout<<ts[i].id<<"\t";  
				time=ts[i].end;  
			}  
		}  
		cout<<endl;  
	}  

	int main()  
	{  
		int s [] = {1,3,0,5,3,5,6,8,8,2,12};    
		int f [] = {4,5,6,7,8,9,10,11,12,13,14};    
		Task ts[11];  
		for(int i=0;i<11;i++)  
		{  
			ts[i].start=s[i];  
			ts[i].end=f[i];  
			ts[i].id=i;  
		}  
		TaskPro(ts,11);  
	}  
