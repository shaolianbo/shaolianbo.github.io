---
layout: post
title:  "求数组的前k小的元素，及其应用"
date:   2012-12-10 15:36:55
categories: algorithm  
---
###问题：n元数组，问是否有和小于m的k元子数组
比如数组{5,4,3,2,1},有和小于10的3元子数组。

###方法一：
枚举所有k元子数组。
采用回朔递归的方法。时间复杂度为N^2
显然这种方法没有挖掘任何题目的条件。

###方法二：
是否有和小于m的子数组，只有知道和最小的子数组的和是否小于
m即可。（同样，如果问是否有和大于m的k元子数组，只需要求
和最大的子数组是否和大于m）.
故可以先给数组排序，再求前k个数的和，与m比较。
快排：O(nlogn)

###方法三：
不必对整个数组排序。
我们只需知道前k小的数字是什么。再求和即可。
这一点可用改进的快排实现。
算法复杂度：
n+n/2+n/4+n/8+...+1
化简后为O（n）

###源码：
	/*  问题：n元数组，问是否有和小于m的k元子数组 
	 * 
	 */  
	#include <algorithm>  
	#include <iostream>  
	#include <numeric>  
	using namespace std;  
	//利用快排求数组第k小的元素。（这种方法，使得该第k小元素的前面的元素是第1-k小的）  
	//找出前k小的所有元素。  
	int partK(int nstart,int nend,int k,int* array)  
		/*  开始索引nstart,结束索引nend,查找array中的第k大的数。 
		 * 
		 */  
	{  
		if( !array || nstart>nend )  
			abort();  
		if(nstart==nend)        //说明搜索范围已经最小，已经中找到。  
		{  
			if((k-1)==nstart)  
				return array[nstart];  
			else  
				abort();  
		}  
		int t=random()%(nend-nstart+1)+nstart;  
		int tempt=array[t];  
		array[t]=array[nend];  
		array[nend]=tempt;  
		int i=nstart-1;  
		for(int j=nstart;j<nend;j++)  
		{  
			if(array[j]<array[nend])  
			{  
				tempt=array[j];  
				array[j]=array[i+1];  
				array[++i]=tempt;  
			}  
		}  
		tempt=array[++i];  
		array[i]=array[nend];  
		array[nend]=tempt;  
		if(i==(k-1))  
			return array[i];  
		if(i<(k-1))  
			return partK(i+1,nend,k,array);  
		else  
			return partK(nstart,i-1,k,array);  
	}  

	bool  findKlist(int* array,int length,int k,int m)  
	{  
		partK(0,length-1,k,array);  
		int total=accumulate(array,array+k,0);  
		if(total<m)  
			return true;  
		else  
			return false;  
	}  



	int main()  
	{  
		int p[]={5,4,3,2,1};  
		cout<<findKlist(p,5,3,10)<<endl;  
		cout<<findKlist(p,5,3,6)<<endl;  

	}  
