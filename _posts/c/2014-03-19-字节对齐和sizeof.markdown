---
layout: post
title:  "字节对齐与sizeof"
date:   2014-03-19 17:55:00
categories: 'c'
tag: ['c']
---

###一、siezeof
`sizeof` : 运算符，`sizeof(a)`,在编译阶段用a占用的栈空间大小替换`sizeof(a)`.
####eg1:
{% highlight cpp%}
class test
{
	int n;
	static int m;
}
sizeof (test)==4!=8 # 因为static放在静态区而不是栈空间，所以sizeof 不于计算。
{% endhighlight %}

####eg2:
{% highlight cpp %}
int a=0;
sizeof(a=1)==4    # 此句之后a的值还为0，因为sizeof 只进行替换，不进行计算。
{% endhighlight %}

####eg3:
{% highlight cpp %}
int fun(){return 1;}
sizeof(fun())==4
{% endhighlight %}

###二、字节对齐
1.自然对齐 `#pagram pack()`。
如果结构体成员的长度都小于机器处理器的位数，则按照最长的成员对齐。 如果最长的成员大于机器
处理器的位数，那么按照机器的位数对齐。还有一点，类型相同的连续元素将在连续的空间内，和数组一样。

2.强制对齐。`#pagram pack(4)`。但是最大对齐为机器处理器位数。
