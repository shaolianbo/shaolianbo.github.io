---
layout: post
title:  "https知识总结"
date:   2014-03-25 17:55:00
tag:  ["web","https","protocol"]
categories: ['web', 'https']
---

#### 一、加密原理

##### 1.对称加密
加密方和解密方用同一个密钥，加密和解密。

优点： 算法简单，效率高

缺点： 在web上需要首先沟通密钥，如果中间密钥被劫持，则数据被窃取。
如果服务器和不同的客户端使用不同的密钥，则密钥的管理比较麻烦。

##### 2.非对称加密
服务器有公钥和私钥,客户端可以获取服务器的公钥，将数据加密后，传回服务器端，服务器使用
私钥解密。

优点： 不用对大量密钥进行管理。算法比较复杂。

缺点： 计算效率低。黑客可以假冒服务器端，劫持客户端的链接请求，并使用自己的公钥，与被
劫持的客户端进行“安全通信”。

#### 二、https

![](/assets/pic/https_struct.png)

https相当于运行在ssl上的http协议。加解密的工作在ssl上完成。

ssl的原理是：通过第三发（或者服务器自身）颁发的证书来验证公钥的真实性，然后通过非对称加密的方式进行通信，
确定一个双方都认可的密钥，解析来使用这个密钥进行对称加密，实现安全传输。

ssl层的建立过程：

1. 客户端与服务器端建立tcp链接。
2. 客户端向服务器端发送可选的加密算法。 服务器端返回确定的算法。（比如确定使用何种对称加密算法）
3. 客户端请求证书。
4. 客户端验证证书的正确性。并获得服务器公钥。
5. 客户端使用公钥将用于对称加密的密钥进行加密，然后返回给服务器。
6. 服务器的到数据后，使用自己的私钥解密，从何获得了密钥。
7. 使用密钥进行通信。

特点： 即有对称加密的安全性，而且兼顾了效率。


#### 三、模拟
因为第三方的签名是需要费用的，所以可以自己模拟授权机构。使用openssl模拟授权，生成密钥。

首先，模拟第三方授权机构。生成自己的密钥，然后使用该密钥给自己签名，生成根证书。客户端，如果想验证
服务器端的证书，必须获得该根证书，否则肯定验证失败。

	$ openssl genrsa -out ca.key 1024
	$ openssl req -new -key ca.key -out ca.csr
	$ openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt

然后，生成服务器端的密钥，并通过“第三法机构”获取证书。

	$ openssl genrsa -out server.key 1024
	$ openssl rsa -in server.key -pubout -out server.pem
	$ openssl req -new -key server.key -out server.csr
	$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt

注意，在第三步生成授权请求文件server.csr时，要指定server名。否则授权文件无效。比如，此处指定为"localhost",因为
客户端需要这个字段来验证服务器的真实行。

服务器端代码：

	var https = require("https");
	var fs=require("fs");

	var options={
		    key: fs.readFileSync("./server.key"),
			cert: fs.readFileSync("./server.crt")
	};

	https.createServer(options,function(req,res){
		    res.writeHead(200);
			res.end("hellow world");
	}).listen(8000);

运行上述代码。

执行`curl https://localhost:8000/`,提示证书验证失败。

执行`curl --cacert ca.crt https://localhost:8000/`,得到正确回复。

执行`curl --cacert ca.crt https://[ip]:8000`, 提示 'localhost'不匹配ip。

顺便给出使用nodejs写的客户端：

	var https = require("https");                                                                                                            
	var fs = require("fs");

	var options={
	hostname:"localhost",
			 port:8000,
			 path:"/",
			 method:"GET",
			 ca:[fs.readFileSync("./ca.crt")]
	};  

	var req =https.request(options,function(res){
			res.on("data",function(d){
				console.log(d.toString())
				});
			});

	req.end();
	req.on("error",function(e){
			console.log(e)
			});
